{"version":3,"sources":["hooks/useInputForm.js","redux/constants/action-types.js","components/addTaskForm.js","components/Task.js","components/Cells.js","components/Calendar.js","components/App.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["useInputForm","initialValue","_useState","useState","_useState2","Object","slicedToArray","value","setValue","e","target","ADD_EVENT","EVENT_BUTTON","SET_MONTH","SET_DATE","components_addTaskForm","props","dispatch","useDispatch","eventButton","useSelector","state","_useInputForm","_useInputForm2","name","updateEventName","_useInputForm3","_useInputForm4","time","updateEventTime","allEvents","JSON","parse","localStorage","getItem","button","heading","react_default","a","createElement","className","onClick","type","payload","onSubmit","evt","preventDefault","id","date","dateFns","format","event","findDate","findObjectByDate","filter","x","push","setItem","stringify","placeholder","autoComplete","maxLength","onChange","required","pattern","array","key","i","length","Task","newArray","eventName","eventTime","RenderCells","currentMonth","selectedDate","addEvent","onDateClick","day","isSameDay","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","rows","days","formattedDate","_loop","cloneDay","addTaskForm","newTask","map","concat","isSameMonth","addDays","Calendar","subMonths","style","paddingRight","display","width","textAlign","addMonths","paddingLeft","scope","Cells","App","buttonText","components_Calendar","initialState","Date","rootReducer","arguments","undefined","action","objectSpread","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.18b0ab7d.chunk.js","sourcesContent":["import {useState} from 'react';\n\nexport default initialValue => {\n    const [value, setValue] = useState(initialValue);\n    const handleChange = e => {\n        setValue(e.target.value)\n    };\n    const reset = () => {\n        setValue(initialValue)\n    };\n    return [value, handleChange, reset]\n}","export const ADD_EVENT = 'ADD_EVENT';\nexport const EVENT_BUTTON = 'EVENT_BUTTON';\nexport const SET_MONTH = 'SET_MONTH';\nexport const SET_DATE = 'SET_DATE';\n","import React from 'react'\nimport useInputForm from '../hooks/useInputForm'\nimport dateFns from \"date-fns\";\nimport \"../styles/main.scss\"\nimport {useDispatch, useSelector} from 'react-redux';\nimport {EVENT_BUTTON, ADD_EVENT} from \"../redux/constants/action-types\";\n\nexport default (props) => {\n    const dispatch = useDispatch();\n    const eventButton = useSelector(state => state.eventButton);\n    const [name, updateEventName] = useInputForm('');\n    const [time, updateEventTime] = useInputForm('09:00');\n    let allEvents = JSON.parse(localStorage.getItem('allEvents'));\n    if (allEvents === null) allEvents = [];\n\n    const addNewEvent = (evt) => {\n        evt.preventDefault();\n        const id = props.id;\n        const date = dateFns.format(id, \"MMMMYYYYDD\");\n        const event = {id, name, time, date};\n        const findDate = findObjectByDate(allEvents, 'date', date);\n        dispatch({type: EVENT_BUTTON, payload: true});\n        if (findDate !== null) {\n            allEvents = allEvents.filter((x) => {\n                return x.date !== date\n            })\n        }\n        allEvents.push(event);\n        localStorage.setItem(\"allEvents\", JSON.stringify(allEvents));\n        dispatch({type: ADD_EVENT, payload: false});\n    };\n\n    const closeEvent = () => {\n        dispatch({type: ADD_EVENT, payload: false})\n    };\n\n    let button = \"Add\";\n    let heading = \"Add task\";\n    if (eventButton === true) {\n        button = \"change\";\n        heading = \"Change event\";\n    }\n    return (\n        <div className={`form-container`}>\n            <h3 className=\"form-header\"> {heading}\n                <i onClick={closeEvent}\n                   className=\"far fa-window-close\"\n                >\n                </i>\n            </h3>\n            <form onSubmit={addNewEvent}>\n                <input\n                    name=\"name\"\n                    value={name}\n                    placeholder=\"Event name\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    maxLength={20}\n                    onChange={updateEventName}\n                    required/>\n                <input\n                    name=\"time\"\n                    value={time}\n                    type=\"time\"\n                    placeholder=\"HH:MM\"\n                    pattern=\"[0-2]?\\d:[0-5]\\d\"\n                    onChange={updateEventTime}\n                    required/>\n                <button>{button}</button>\n            </form>\n        </div>)\n}\n\nconst findObjectByDate = (array, key, value) => {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i][key] === value) {\n            return array[i];\n        }\n    }\n    return null;\n};","import React from 'react'\nimport \"../styles/main.scss\"\n\nexport default (props) => {\n    let allEvents = JSON.parse(localStorage.getItem('allEvents'));\n    if (allEvents === null) allEvents = [];\n\n    const deleteEvent = () => {\n        const date = props.date;\n        const newArray = allEvents.filter((x) => {\n            return x.date !== date\n        });\n        localStorage.setItem(\"allEvents\", JSON.stringify(newArray));\n    };\n\n    return (\n        <div className=\"task\">\n            <i\n                onClick={deleteEvent}\n                className=\"far fa-window-close\"\n            >\n            </i>\n            <h4 className=\"task-heading\">\n                <span\n                    className=\"status green\"\n                >\n                </span>\n                {props.eventName}</h4>\n            <h4 className=\"time\">\n                <i className=\"far fa-clock\">\n                </i> {props.eventTime}\n            </h4>\n        </div>\n    )\n}","import React from 'react'\nimport AddTaskForm from \"./addTaskForm\";\nimport Task from \"./Task\"\nimport dateFns from \"date-fns\";\nimport \"../styles/main.scss\";\nimport {useSelector, useDispatch} from 'react-redux';\nimport {ADD_EVENT, EVENT_BUTTON, SET_DATE,} from \"../redux/constants/action-types\";\n\nconst RenderCells = () => {\n    const dispatch = useDispatch();\n    const currentMonth = useSelector(state => state.currentMonth);\n    const selectedDate = useSelector(state => state.selectedDate);\n    const addEvent = useSelector(state => state.addEvent);\n\n    let allEvents = JSON.parse(localStorage.getItem('allEvents'));\n    if (allEvents === null) allEvents = [];\n\n    const onDateClick = (day) => {\n        const date = dateFns.format(day, \"MMMMYYYYDD\");\n        const findDate = findObjectByDate(allEvents, 'date', date);\n        dispatch({type: SET_DATE, payload: day});\n\n        if (!dateFns.isSameDay(day, selectedDate)) {\n            dispatch({type: ADD_EVENT, payload: false});\n        }\n        if (findDate !== null) {\n            dispatch({type: EVENT_BUTTON, payload: true})\n        } else {\n            dispatch({type: EVENT_BUTTON, payload: false})\n        }\n    };\n\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const dateFormat = \"D\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n        for (let i = 0; i < 7; i++) {\n            formattedDate = dateFns.format(day, dateFormat);\n            const cloneDay = day;\n\n            let addTaskForm;\n            if (addEvent === true &&\n                dateFns.isSameDay(day, selectedDate) === true) {\n                addTaskForm = <AddTaskForm id={day}/>\n            }\n            let newTask;\n            allEvents.map((x) => {\n                if (dateFns.isSameDay(day, x.id)) {\n                    return newTask = <Task\n                        eventName={x.name}\n                        eventTime={x.time}\n                        date={x.date}\n                    />\n                }\n            });\n            days.push(\n                <td\n                    className={`${\n                        !dateFns.isSameMonth(day, monthStart)\n                            ? \"disabled\"\n                            : dateFns.isSameDay(day, selectedDate) ? \"highlight\" : \"\"\n                        }`}\n\n                    key={day}\n                    onClick={() => onDateClick(dateFns.parse(cloneDay))}>\n\n                    {formattedDate}\n                    {addTaskForm}\n                    {newTask}\n                </td>\n            );\n            day = dateFns.addDays(day, 1);\n        }\n\n        rows.push(\n            <tr key={day}>\n                {days}\n            </tr>\n        );\n\n        days = [];\n    }\n    return <tbody className=\"body\">{rows}</tbody>;\n};\n\nexport default RenderCells;\n\nconst findObjectByDate = (array, key, value) => {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i][key] === value) {\n            return array[i];\n        }\n    }\n    return null;\n};","import React from \"react\";\nimport RenderCells from './Cells'\nimport dateFns from \"date-fns\";\nimport \"../styles/main.scss\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {SET_MONTH} from \"../redux/constants/action-types\";\n\nconst Calendar = () => {\n    const dispatch = useDispatch();\n    const currentMonth = useSelector(state=>state.currentMonth);\n\n    const nextMonth = () => {\n        dispatch({type: SET_MONTH, payload: dateFns.addMonths(currentMonth, 1)});\n    };\n\n    const prevMonth = () => {\n        dispatch({type: SET_MONTH, payload: dateFns.subMonths(currentMonth, 1)});\n    };\n\n    return (\n        <div className=\"calendar-box\">\n            <div className=\"calendar-navigation-row\">\n                <div className=\"calendar-nvaigation-row-year-container\">\n                    <i onClick={prevMonth}\n                       className=\"fas fa-chevron-left\"\n                       style={{paddingRight: \"4rem\"}}\n                    />\n                    <h2 style={{display: \"inline-block\", width: \"20rem\", textAlign: \"center\"}}>\n                        {dateFns.format(currentMonth, \"MMMM YYYY\")}</h2>\n                    <i onClick={nextMonth}\n                       className=\"fas fa-chevron-right\"\n                       style={{paddingLeft: \"4rem\"}}\n                    />\n                </div>\n            </div>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">Sunday</th>\n                    <th scope=\"col\">Monday</th>\n                    <th scope=\"col\">Tuesday</th>\n                    <th scope=\"col\">Wednesday</th>\n                    <th scope=\"col\">Thursday</th>\n                    <th scope=\"col\">Friday</th>\n                    <th scope=\"col\">Saturday</th>\n                </tr>\n                </thead>\n                <RenderCells/>\n            </table>\n        </div>\n    )\n};\n\nexport default Calendar","import React from \"react\";\nimport Calendar from \"./Calendar\"\nimport \"../styles/main.scss\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {ADD_EVENT} from \"../redux/constants/action-types\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const eventButton = useSelector(state => state.eventButton);\n\n    const addEvent = () => {\n        dispatch({type: ADD_EVENT, payload: true});\n    };\n\n    const buttonText = eventButton ? \"Change event\" : \"+ Add event\"\n    return (\n        <div className=\"mainLayout\">\n            <div className=\"event-buttons-container\">\n                <button\n                    className=\"event-button\"\n                    onClick={addEvent}\n                >\n                    {buttonText}\n                </button>\n            </div>\n            <Calendar/>\n        </div>\n    );\n};\n\nexport default App;\n","import {ADD_EVENT, EVENT_BUTTON, SET_DATE, SET_MONTH} from '../constants/action-types';\n\nconst initialState = {\n    addEvent: false,\n    eventButton: false,\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n};\n\nfunction rootReducer(state = initialState, action) {\n    switch (action.type){\n        case ADD_EVENT:\n            return {...state, addEvent: action.payload};\n        case EVENT_BUTTON:\n            return {...state, eventButton: action.payload};\n        case SET_MONTH:\n            return {...state, currentMonth: action.payload};\n        case SET_DATE:\n            return {...state, selectedDate: action.payload};\n        default:\n            return state\n    }\n}\n\nexport default rootReducer;","import {createStore} from 'redux';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport {Provider} from 'react-redux';\nimport store from './redux/store/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById(\"root\"));\n"],"sourceRoot":""}